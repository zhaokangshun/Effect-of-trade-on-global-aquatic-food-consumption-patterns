s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.2'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(unique(y_join_1$merge.2))
r2 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.2==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r2 = rbind(r2,dm)
}
##分别做数据匹配-3
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.3'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(unique(y_join_1$merge.3))
r3 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.3==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r3 = rbind(r3,dm)
}
##分别做数据匹配-4
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.4'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$merge.4)))
r4 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.4==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r4 = rbind(r4,dm)
}
##分别做数据匹配-5
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.5'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$merge.5)))
r5 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.5==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r5 = rbind(r5,dm)
}
##分别做数据匹配-6
s2_2_t = s2[,c(1,3)]
names(s2_2_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_2_t,by='Aqua.Cap.items')
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$Aqua.Cap.items)))
r6 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,Aqua.Cap.items==i)
#pop = prop.table(dm$`2019`)
dm['f2'] = dm$value1
r6 = rbind(r6,dm)
}
##合并r1-r5
#r1_5 = rbind(r1,r2,r3,r4,r5)
#r1_5 = r1_5[,c("Aqua.Cap.items","f1")]
#r1_5 = ddply(r1_5,.(Aqua.Cap.items),summarize,f3=sum(f1)) ##求合计
##与r6匹配--结果
#r8 <- left_join(r6,r1_5,by = 'Aqua.Cap.items')
# r8['f4']<-ifelse()
fillna <- function(x){
x[is.na(x )]<- 0;
x
}
r6['f2']<-fillna( r6['f2'])
#r8['f3']<-fillna( r8['f3'])
r6['f4']<- r6[7]-r6['f2']
# r8[11]<- r8['f4']
#r6['f4'] <-r6['f2']
r9<-r6[,c(1:6,15)]
r9['year']=yi
return(r9)}
##### 进口-未减完的出口
base1 = names(m_01)[1:6]
base2 = names(export_m)[1:2]
yt = as.vector(names(m_01)[7:51])
country = as.vector(unique(m_01$Country))
dataf <- subset(export_m,grepl(",",Aqua.Cap.items))
countries <-as.vector(unique(dataf$Country))
tf = c()
for (i in countries){
ii = which(country ==i)
tf = append(tf,ii)
}
countries_f = country[-tf]
##1
dt = data.frame()
for (ci in countries){
# if(ci =="Peru"){next}
for (yi in yt){
result<-Vol_a(m_01,export_m,ci,yi)
dt = rbind(dt,result)
}
}
##2
dt_f = data.frame()
for (ci in countries_f){
#if(ci =="Peru"){next}
for (yi in yt){
result<-Vol_b(m_01,export_m,ci,yi)
dt_f = rbind(dt_f,result)
}
}
##3
dt_result<-rbind(dt,dt_f)
dt_result_final <- dt_result %>%
pivot_wider(names_from = year,
values_from = f4)
write.csv(dt_result_final,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产-剩余出口.csv")
##小于0的数据转为0
positive <- function(x){
x[x<0]<- 0;
x
}
dt_result_final_copy <-dt_result_final
x1<-names(dt_result_final_copy)[7:51]
for (xi in x1){
dt_result_final_copy[xi]<-positive(dt_result_final_copy[xi])
}
write.csv(dt_result_final_copy,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产-剩余出口-0.csv")
Vol_a <- function(m_01,export_m,ci,yi){
#ci = 'Peru'
#yi = "2019"
# ci = 'Afghanistan'
#  yi ='2019'
t1 = filter(m_01,Country ==ci)
t2 = t1[,c(base1,yi)]
t_items = as.vector(t2$Aqua.Cap.items)
s1 = filter(export_m,Country ==ci)
s2 = s1[,c(base2,yi)]
items_total = as.vector(s2$Aqua.Cap.items)
##筛选s2中带逗号
s2_1 = subset(s2,grepl(",",Aqua.Cap.items))
items_1 = as.vector(s2_1$Aqua.Cap.items)
tt = c()
for (i in items_1){
ii = which(items_total ==i)
tt = append(tt,ii)
}
items_2 = items_total[-tt]
s2_2 = data.frame()
for (i in items_2){
s1 = filter(s2,Aqua.Cap.items==i)
s2_2 = rbind(s1,s2_2)
}
##12345
dt1 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[1]
dt1 = rbind(x,dt1)
}
names(dt1) <- c('Aqua.Cap.items','merge.1')
x_join_1 = left_join(t2,dt1,by='Aqua.Cap.items')
##12345
dt2 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[2]
dt2 = rbind(x,dt2)
}
names(dt2) <- c('Aqua.Cap.items','merge.2')
x_join_2 = left_join( x_join_1,dt2,by='Aqua.Cap.items')
##12345
dt3 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[3]
dt3 = rbind(x,dt3)
}
names(dt3) <- c('Aqua.Cap.items','merge.3')
x_join_3 = left_join( x_join_2,dt3,by='Aqua.Cap.items')
##12345
dt4 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[4]
dt4 = rbind(x,dt4)
}
names(dt4) <- c('Aqua.Cap.items','merge.4')
x_join_4 = left_join( x_join_3,dt4,by='Aqua.Cap.items')
##12345
dt5 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[5]
dt5 = rbind(x,dt5)
}
names(dt5) <- c('Aqua.Cap.items','merge.5')
x_join_5 = left_join( x_join_4,dt5,by='Aqua.Cap.items')
# s2_2['merge.6'] = s2_2['Aqua.Cap.items']
#s2_2_0 = s2_2[,c(1,4)]
#x_join_6 = left_join(x_join_5,s2_2_0,by = 'Aqua.Cap.items')
#######
# x_join_6 = x_join_5[,c(base1,]
names(dt1) <- c('Aqua.Cap.items','merge')
names(dt2) <- c('Aqua.Cap.items','merge')
names(dt3) <- c('Aqua.Cap.items','merge')
names(dt4) <- c('Aqua.Cap.items','merge')
names(dt5) <- c('Aqua.Cap.items','merge')
dt6<-rbind(dt1,dt2,dt3,dt4,dt5)
dt6 <- dt6 %>% distinct()
dt7<-na.omit(dt6)
dt8<-left_join(dt7,t2,by = 'Aqua.Cap.items')
s2_3 <- s2_1[,c(1,3)]
names(s2_3) = c('merge','value')
dt9<-left_join(dt8,s2_3,by='merge')
t9<-as.vector(unique(dt9$merge))
dt10<-data.frame()
for (xi in t9){
xx = filter(dt9,merge ==xi)
pop = prop.table(xx[8])
xx['f1'] = xx$value*pop
dt10 = rbind(dt10,xx)
}
pos <- function(x) {
x[is.na(x)] <- 0
x
}
dt10['f1'] = pos(dt10['f1'])
##分配完的结果数据
dt11<-ddply(dt10,.(Aqua.Cap.items),summarize,f2 = sum(f1))
##匹配并做差
s2_4 = s2[,c(1,3)]
names(s2_4) = c("Aqua.Cap.items","f3")
dt12<-left_join(t2,s2_4,by ="Aqua.Cap.items")
dt13<-left_join(dt12,dt11,by = "Aqua.Cap.items")
dt13['f3'] <- pos(dt13['f3'])
dt13['f2'] <- pos(dt13['f2'])
dt13['f4'] <- dt13[yi]-dt13['f2']-dt13['f3']
dt14<-dt13[,c(base1,'f4')]
dt14['year']=yi
return(dt14)
}
Vol_b <- function(m_01,export_m,ci,yi){
#  ci = 'United States of America'
# yi = "2019"
# ci = 'Afghanistan'
#yi ='2019'
t1 = filter(m_01,Country ==ci)
t2 = t1[,c(base1,yi)]
t_items = as.vector(t2$Aqua.Cap.items)
s1 = filter(export_m,Country ==ci)
s2 = s1[,c(base2,yi)]
items_total = as.vector(s2$Aqua.Cap.items)
##筛选s2中带逗号
s2_1 = subset(s2,grepl(",",Aqua.Cap.items))
items_1 = as.vector(s2_1$Aqua.Cap.items)
tt = c()
for (i in items_1){
ii = which(items_total ==i)
tt = append(tt,ii)
}
##12345
dt1 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[1]
dt1 = rbind(x,dt1)
}
names(dt1) <- c('Aqua.Cap.items','merge.1')
x_join_1 = left_join(t2,dt1,by='Aqua.Cap.items')
##12345
dt2 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[2]
dt2 = rbind(x,dt2)
}
names(dt2) <- c('Aqua.Cap.items','merge.2')
x_join_2 = left_join( x_join_1,dt2,by='Aqua.Cap.items')
##12345
dt3 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[3]
dt3 = rbind(x,dt3)
}
names(dt3) <- c('Aqua.Cap.items','merge.3')
x_join_3 = left_join( x_join_2,dt3,by='Aqua.Cap.items')
##12345
dt4 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[4]
dt4 = rbind(x,dt4)
}
names(dt4) <- c('Aqua.Cap.items','merge.4')
x_join_4 = left_join( x_join_3,dt4,by='Aqua.Cap.items')
##12345
dt5 = data.frame()
##先拆分带逗号的并匹配，然后匹配不带逗号的
for (i in t_items){
num = grep(i,items_1,value = T)
x = data.frame(i)
x['n'] = num[5]
dt5 = rbind(x,dt5)
}
names(dt5) <- c('Aqua.Cap.items','merge.5')
x_join_5 = left_join( x_join_4,dt5,by='Aqua.Cap.items')
##分别做数据匹配-1
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.1'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(unique(y_join_1$merge.1))
r1 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.1==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r1 = rbind(r1,dm)
}
##分别做数据匹配-2
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.2'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(unique(y_join_1$merge.2))
r2 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.2==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r2 = rbind(r2,dm)
}
##分别做数据匹配-3
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.3'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(unique(y_join_1$merge.3))
r3 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.3==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r3 = rbind(r3,dm)
}
##分别做数据匹配-4
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.4'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$merge.4)))
r4 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.4==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r4 = rbind(r4,dm)
}
##分别做数据匹配-5
s2_1_t = s2_1[,c(1,3)]
names(s2_1_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_1_t,by=c('merge.5'='Aqua.Cap.items'))
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$merge.5)))
r5 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,merge.5==i)
pop = prop.table(dm[7])
dm['f1'] = dm$value1*pop
r5 = rbind(r5,dm)
}
##分别做数据匹配-6
s2_2_t = s2[,c(1,3)]
names(s2_2_t) = c('Aqua.Cap.items','value1')
y_join_1 = left_join(x_join_5,s2_2_t,by='Aqua.Cap.items')
#xt_1 = filter(y_join_1,value1 >0 )
xm1<-as.vector(na.omit(unique(y_join_1$Aqua.Cap.items)))
r6 = data.frame()
for (i in xm1){
# i = "Atlantic bluefin tuna, Bigeye tuna, Blackfin tuna, Pacific bluefin tuna, Skipjack tuna, Tuna and bonito, Yellowfin tuna"
dm = filter(y_join_1,Aqua.Cap.items==i)
#pop = prop.table(dm$`2019`)
dm['f2'] = dm$value1
r6 = rbind(r6,dm)
}
##合并r1-r5
#r1_5 = rbind(r1,r2,r3,r4,r5)
#r1_5 = r1_5[,c("Aqua.Cap.items","f1")]
#r1_5 = ddply(r1_5,.(Aqua.Cap.items),summarize,f3=sum(f1)) ##求合计
##与r6匹配--结果
#r8 <- left_join(r6,r1_5,by = 'Aqua.Cap.items')
# r8['f4']<-ifelse()
fillna <- function(x){
x[is.na(x )]<- 0;
x
}
r6['f2']<-fillna( r6['f2'])
#r8['f3']<-fillna( r8['f3'])
r6['f4']<- r6[7]-r6['f2']
# r8[11]<- r8['f4']
#r6['f4'] <-r6['f2']
r9<-r6[,c(1:6,15)]
r9['year']=yi
return(r9)}
library(plyr)
library(readxl)
library(dplyr)
library(tidyverse)
## 一、 数据导入
m_01<- read_xlsx("F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产+减完的进口-出口-剩余正值-1.xlsx")
export_1<- read_xlsx("F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/未减完的出口量-1.xlsx")
datahandle <- function(export_1) {
export <- export_1[, c(1,7, 8:52)]
export_001 <- filter(export, Aqua.Cap.items != "NA")
export_002 <- aggregate(. ~ Aqua.Cap.items + Country, data = export_001, sum)
}
export_m <- datahandle(export_1) ## 去重复的数据集
write.csv(export_m,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/未减完的出口量-1整合.csv")
##### 进口-未减完的出口
base1 = names(m_01)[1:6]
base2 = names(export_m)[1:2]
yt = as.vector(names(m_01)[7:51])
country = as.vector(unique(m_01$Country))
dataf <- subset(export_m,grepl(",",Aqua.Cap.items))
countries <-as.vector(unique(dataf$Country))
tf = c()
for (i in countries){
ii = which(country ==i)
tf = append(tf,ii)
}
countries_f = country[-tf]
##1
dt = data.frame()
for (ci in countries){
# if(ci =="Peru"){next}
for (yi in yt){
result<-Vol_a(m_01,export_m,ci,yi)
dt = rbind(dt,result)
}
}
##2
dt_f = data.frame()
for (ci in countries_f){
#if(ci =="Peru"){next}
for (yi in yt){
result<-Vol_b(m_01,export_m,ci,yi)
dt_f = rbind(dt_f,result)
}
}
##3
dt_result<-rbind(dt,dt_f)
##结果
#dt <- dt_141[,c(2:13)]
dt_result_final <- dt_result %>%
pivot_wider(names_from = year,
values_from = f4)
write.csv(dt_result_final,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产+减完的进口-剩余出口.csv")
##小于0的数据转为0
positive <- function(x){
x[x<0]<- 0;
x
}
dt_result_final_copy <-dt_result_final
x1<-names(dt_result_final_copy)[7:51]
for (xi in x1){
dt_result_final_copy[xi]<-positive(dt_result_final_copy[xi])
}
write.csv(dt_result_final_copy,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产+减完的进口-剩余出口-0.csv")
positive <- function(x){
x[x>0]<- 0;
x
}
dt_result_final_copy <-dt_result_final
x1<-names(dt_result_final_copy)[7:51]
for (xi in x1){
dt_result_final_copy[xi]<-positive(dt_result_final_copy[xi])
}
write.csv(dt_result_final_copy,"F:/IHB/fifth article/Statistical analysis/Subtract export data from all production-method 2/生产+减完的进口-剩余出口-剩余出口.csv")
##主函数
